<?xml version="1.0" ?>
<launch>
  <arg name="limited" default="false"  doc="If true, limits joint range [-PI, PI] on all joints."/>
  <arg name="robot_x"   default="0.0" />
  <arg name="robot_y"   default="0.0" />
  <arg name="robot_yaw" default="0.0" />
  <arg name="prefix"    value="" />   <!-- this has to be "value", not "default", otherwise subst_value doesn't work -->
    <!-- Load URDF -->

  <include file="$(find skywalker)/launch/upload_skywalker_urdf.launch">
  <arg name="limited" value="$(arg limited)"/>
  </include>
       
  <!-- Spawn the robot into Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model skywalker -x $(arg robot_x) -y $(arg robot_y) -Y $(arg robot_yaw) "/>
	
  <!-- Load ros_control controller configurations -->
  <rosparam file="$(find mir_description)/config/joint_state_controller.yaml" command="load" />
  <rosparam file="$(find mir_description)/config/diffdrive_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find skywalker)/controller/arm_controller_ur5e.yaml" command="load" subst_value="true" />

  <!-- Start the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
    args="joint_state_controller mobile_base_controller"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>
  <!--node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/-->
	<!-- load other controllers -->
  <!--node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" /-->

  <!-- EKF -->
  <include file="$(find mir_gazebo)/launch/includes/ekf.launch.xml"/>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" type="string" value="" />
  </node>
  <!-- Load teleop -->
  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
    <param name="default_topic" value="cmd_vel"/>
    <param name="default_vx_max" value="1.0" />
    <param name="default_vx_min" value="-1.0" />
    <param name="default_vw_max" value="1.5" />
    <param name="default_vw_min" value="-1.5" />
  </node>

  <!-- create combined scan topic (like on real MiR) -->
  <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
  <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>

  <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="b_scan" />
    <remap from="scan_filtered" to="b_scan_rep117" />
  </node>

  <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="f_scan" />
    <remap from="scan_filtered" to="f_scan_rep117" />
  </node>
  <!-- Fake Calibration ur5e-->
  <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />

</launch>
